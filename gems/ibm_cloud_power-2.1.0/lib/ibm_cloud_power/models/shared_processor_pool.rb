=begin
#Power Cloud API

#IBM Power Cloud API for Power Hardware / Infrastructure

The version of the OpenAPI document: 1.0.0
Contact: kylej@us.ibm.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module IbmCloudPower
  class SharedProcessorPool
    # The amount of allocated processor cores for the Shared Processor Pool
    attr_accessor :allocated_cores

    # The amount of available processor cores for the Shared Processor Pool
    attr_accessor :available_cores

    # The host group the host belongs to
    attr_accessor :host_group

    # The ID of the host where the Shared Processor Pool resides
    attr_accessor :host_id

    # The id of the Shared Processor Pool
    attr_accessor :id

    # The name of the Shared Processor Pool
    attr_accessor :name

    # The amount of reserved processor cores for the Shared Processor Pool
    attr_accessor :reserved_cores

    # list of Shared Processor Pool Placement Groups
    attr_accessor :shared_processor_pool_placement_groups

    # The status of the Shared Processor Pool
    attr_accessor :status

    # The status details of the Shared Processor Pool
    attr_accessor :status_detail

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allocated_cores' => :'allocatedCores',
        :'available_cores' => :'availableCores',
        :'host_group' => :'hostGroup',
        :'host_id' => :'hostID',
        :'id' => :'id',
        :'name' => :'name',
        :'reserved_cores' => :'reservedCores',
        :'shared_processor_pool_placement_groups' => :'sharedProcessorPoolPlacementGroups',
        :'status' => :'status',
        :'status_detail' => :'statusDetail'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'allocated_cores' => :'Float',
        :'available_cores' => :'Float',
        :'host_group' => :'String',
        :'host_id' => :'Integer',
        :'id' => :'String',
        :'name' => :'String',
        :'reserved_cores' => :'Integer',
        :'shared_processor_pool_placement_groups' => :'Array<SharedProcessorPoolPlacementGroup>',
        :'status' => :'String',
        :'status_detail' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `IbmCloudPower::SharedProcessorPool` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `IbmCloudPower::SharedProcessorPool`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'allocated_cores')
        self.allocated_cores = attributes[:'allocated_cores']
      end

      if attributes.key?(:'available_cores')
        self.available_cores = attributes[:'available_cores']
      end

      if attributes.key?(:'host_group')
        self.host_group = attributes[:'host_group']
      end

      if attributes.key?(:'host_id')
        self.host_id = attributes[:'host_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'reserved_cores')
        self.reserved_cores = attributes[:'reserved_cores']
      end

      if attributes.key?(:'shared_processor_pool_placement_groups')
        if (value = attributes[:'shared_processor_pool_placement_groups']).is_a?(Array)
          self.shared_processor_pool_placement_groups = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_detail')
        self.status_detail = attributes[:'status_detail']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @allocated_cores.nil?
        invalid_properties.push('invalid value for "allocated_cores", allocated_cores cannot be nil.')
      end

      if @available_cores.nil?
        invalid_properties.push('invalid value for "available_cores", available_cores cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @reserved_cores.nil?
        invalid_properties.push('invalid value for "reserved_cores", reserved_cores cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @allocated_cores.nil?
      return false if @available_cores.nil?
      return false if @id.nil?
      return false if @name.nil?
      return false if @reserved_cores.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allocated_cores == o.allocated_cores &&
          available_cores == o.available_cores &&
          host_group == o.host_group &&
          host_id == o.host_id &&
          id == o.id &&
          name == o.name &&
          reserved_cores == o.reserved_cores &&
          shared_processor_pool_placement_groups == o.shared_processor_pool_placement_groups &&
          status == o.status &&
          status_detail == o.status_detail
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [allocated_cores, available_cores, host_group, host_id, id, name, reserved_cores, shared_processor_pool_placement_groups, status, status_detail].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = IbmCloudPower.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
