# Copyright (c) 2016, 2022, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for a HostAgentScan list export to CSV action
  class VulnerabilityScanning::Models::ExportHostAgentScanResultCsvDetails
    HIGHEST_PROBLEM_SEVERITY_ENUM = [
      HIGHEST_PROBLEM_SEVERITY_NONE = 'NONE'.freeze,
      HIGHEST_PROBLEM_SEVERITY_LOW = 'LOW'.freeze,
      HIGHEST_PROBLEM_SEVERITY_MEDIUM = 'MEDIUM'.freeze,
      HIGHEST_PROBLEM_SEVERITY_HIGH = 'HIGH'.freeze,
      HIGHEST_PROBLEM_SEVERITY_CRITICAL = 'CRITICAL'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment to list scans in.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** Date and time after which scans were started, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
    # @return [DateTime]
    attr_accessor :time_started_after

    # **[Required]** Date and time before which scans were started, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
    # @return [DateTime]
    attr_accessor :time_started_before

    # Parameter to filter by highestProblemSeverity for scan results
    # @return [String]
    attr_reader :highest_problem_severity

    # Parameter to filter by a single compute instance ID for scan results
    # @return [String]
    attr_accessor :instance_id

    # Parameter to filter by operating system for scan results
    # @return [String]
    attr_accessor :operating_system

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'time_started_after': :'timeStartedAfter',
        'time_started_before': :'timeStartedBefore',
        'highest_problem_severity': :'highestProblemSeverity',
        'instance_id': :'instanceId',
        'operating_system': :'operatingSystem'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'time_started_after': :'DateTime',
        'time_started_before': :'DateTime',
        'highest_problem_severity': :'String',
        'instance_id': :'String',
        'operating_system': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [DateTime] :time_started_after The value to assign to the {#time_started_after} property
    # @option attributes [DateTime] :time_started_before The value to assign to the {#time_started_before} property
    # @option attributes [String] :highest_problem_severity The value to assign to the {#highest_problem_severity} property
    # @option attributes [String] :instance_id The value to assign to the {#instance_id} property
    # @option attributes [String] :operating_system The value to assign to the {#operating_system} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.time_started_after = attributes[:'timeStartedAfter'] if attributes[:'timeStartedAfter']

      raise 'You cannot provide both :timeStartedAfter and :time_started_after' if attributes.key?(:'timeStartedAfter') && attributes.key?(:'time_started_after')

      self.time_started_after = attributes[:'time_started_after'] if attributes[:'time_started_after']

      self.time_started_before = attributes[:'timeStartedBefore'] if attributes[:'timeStartedBefore']

      raise 'You cannot provide both :timeStartedBefore and :time_started_before' if attributes.key?(:'timeStartedBefore') && attributes.key?(:'time_started_before')

      self.time_started_before = attributes[:'time_started_before'] if attributes[:'time_started_before']

      self.highest_problem_severity = attributes[:'highestProblemSeverity'] if attributes[:'highestProblemSeverity']

      raise 'You cannot provide both :highestProblemSeverity and :highest_problem_severity' if attributes.key?(:'highestProblemSeverity') && attributes.key?(:'highest_problem_severity')

      self.highest_problem_severity = attributes[:'highest_problem_severity'] if attributes[:'highest_problem_severity']

      self.instance_id = attributes[:'instanceId'] if attributes[:'instanceId']

      raise 'You cannot provide both :instanceId and :instance_id' if attributes.key?(:'instanceId') && attributes.key?(:'instance_id')

      self.instance_id = attributes[:'instance_id'] if attributes[:'instance_id']

      self.operating_system = attributes[:'operatingSystem'] if attributes[:'operatingSystem']

      raise 'You cannot provide both :operatingSystem and :operating_system' if attributes.key?(:'operatingSystem') && attributes.key?(:'operating_system')

      self.operating_system = attributes[:'operating_system'] if attributes[:'operating_system']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] highest_problem_severity Object to be assigned
    def highest_problem_severity=(highest_problem_severity)
      raise "Invalid value for 'highest_problem_severity': this must be one of the values in HIGHEST_PROBLEM_SEVERITY_ENUM." if highest_problem_severity && !HIGHEST_PROBLEM_SEVERITY_ENUM.include?(highest_problem_severity)

      @highest_problem_severity = highest_problem_severity
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        time_started_after == other.time_started_after &&
        time_started_before == other.time_started_before &&
        highest_problem_severity == other.highest_problem_severity &&
        instance_id == other.instance_id &&
        operating_system == other.operating_system
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, time_started_after, time_started_before, highest_problem_severity, instance_id, operating_system].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
