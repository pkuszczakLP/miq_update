# Copyright (c) 2016, 2022, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A summary of a result for a host agent scan
  class VulnerabilityScanning::Models::HostAgentScanResultSummary
    HIGHEST_PROBLEM_SEVERITY_ENUM = [
      HIGHEST_PROBLEM_SEVERITY_NONE = 'NONE'.freeze,
      HIGHEST_PROBLEM_SEVERITY_LOW = 'LOW'.freeze,
      HIGHEST_PROBLEM_SEVERITY_MEDIUM = 'MEDIUM'.freeze,
      HIGHEST_PROBLEM_SEVERITY_HIGH = 'HIGH'.freeze,
      HIGHEST_PROBLEM_SEVERITY_CRITICAL = 'CRITICAL'.freeze,
      HIGHEST_PROBLEM_SEVERITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique identifier of the scan
    # @return [String]
    attr_accessor :id

    # Name of the resource
    # @return [String]
    attr_accessor :display_name

    # **[Required]** Instance ID of the Compute Instance scanned
    # @return [String]
    attr_accessor :instance_id

    # **[Required]** Compartment ID of the resource. This is set to the same as the compartment ID of the scan target
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** Highest problem severity in this report
    # @return [String]
    attr_reader :highest_problem_severity

    # **[Required]** Operating system of the host
    # @return [String]
    attr_accessor :operating_system

    # **[Required]** Total number of problems found in this scan
    # @return [Integer]
    attr_accessor :problem_count

    # **[Required]** Date and time the scan was started, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
    # @return [DateTime]
    attr_accessor :time_started

    # **[Required]** Date and time the scan was completed, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
    # @return [DateTime]
    attr_accessor :time_finished

    # The current state of the result.
    # @return [String]
    attr_reader :lifecycle_state

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'instance_id': :'instanceId',
        'compartment_id': :'compartmentId',
        'highest_problem_severity': :'highestProblemSeverity',
        'operating_system': :'operatingSystem',
        'problem_count': :'problemCount',
        'time_started': :'timeStarted',
        'time_finished': :'timeFinished',
        'lifecycle_state': :'lifecycleState'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'instance_id': :'String',
        'compartment_id': :'String',
        'highest_problem_severity': :'String',
        'operating_system': :'String',
        'problem_count': :'Integer',
        'time_started': :'DateTime',
        'time_finished': :'DateTime',
        'lifecycle_state': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :instance_id The value to assign to the {#instance_id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :highest_problem_severity The value to assign to the {#highest_problem_severity} property
    # @option attributes [String] :operating_system The value to assign to the {#operating_system} property
    # @option attributes [Integer] :problem_count The value to assign to the {#problem_count} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_finished The value to assign to the {#time_finished} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.instance_id = attributes[:'instanceId'] if attributes[:'instanceId']

      raise 'You cannot provide both :instanceId and :instance_id' if attributes.key?(:'instanceId') && attributes.key?(:'instance_id')

      self.instance_id = attributes[:'instance_id'] if attributes[:'instance_id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.highest_problem_severity = attributes[:'highestProblemSeverity'] if attributes[:'highestProblemSeverity']

      raise 'You cannot provide both :highestProblemSeverity and :highest_problem_severity' if attributes.key?(:'highestProblemSeverity') && attributes.key?(:'highest_problem_severity')

      self.highest_problem_severity = attributes[:'highest_problem_severity'] if attributes[:'highest_problem_severity']

      self.operating_system = attributes[:'operatingSystem'] if attributes[:'operatingSystem']

      raise 'You cannot provide both :operatingSystem and :operating_system' if attributes.key?(:'operatingSystem') && attributes.key?(:'operating_system')

      self.operating_system = attributes[:'operating_system'] if attributes[:'operating_system']

      self.problem_count = attributes[:'problemCount'] if attributes[:'problemCount']

      raise 'You cannot provide both :problemCount and :problem_count' if attributes.key?(:'problemCount') && attributes.key?(:'problem_count')

      self.problem_count = attributes[:'problem_count'] if attributes[:'problem_count']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_finished = attributes[:'timeFinished'] if attributes[:'timeFinished']

      raise 'You cannot provide both :timeFinished and :time_finished' if attributes.key?(:'timeFinished') && attributes.key?(:'time_finished')

      self.time_finished = attributes[:'time_finished'] if attributes[:'time_finished']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] highest_problem_severity Object to be assigned
    def highest_problem_severity=(highest_problem_severity)
      # rubocop:disable Style/ConditionalAssignment
      if highest_problem_severity && !HIGHEST_PROBLEM_SEVERITY_ENUM.include?(highest_problem_severity)
        OCI.logger.debug("Unknown value for 'highest_problem_severity' [" + highest_problem_severity + "]. Mapping to 'HIGHEST_PROBLEM_SEVERITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @highest_problem_severity = HIGHEST_PROBLEM_SEVERITY_UNKNOWN_ENUM_VALUE
      else
        @highest_problem_severity = highest_problem_severity
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        instance_id == other.instance_id &&
        compartment_id == other.compartment_id &&
        highest_problem_severity == other.highest_problem_severity &&
        operating_system == other.operating_system &&
        problem_count == other.problem_count &&
        time_started == other.time_started &&
        time_finished == other.time_finished &&
        lifecycle_state == other.lifecycle_state
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, instance_id, compartment_id, highest_problem_severity, operating_system, problem_count, time_started, time_finished, lifecycle_state].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
