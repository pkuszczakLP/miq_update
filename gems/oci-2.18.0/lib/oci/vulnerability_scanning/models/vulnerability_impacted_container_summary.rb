# Copyright (c) 2016, 2022, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Information on a container image impacted by a vulnerability
  class VulnerabilityScanning::Models::VulnerabilityImpactedContainerSummary
    # **[Required]** The scan target id of the repository scan result
    # @return [String]
    attr_accessor :container_scan_target_id

    # **[Required]** The repository id of the container image.
    # @return [String]
    attr_accessor :repository

    # **[Required]** The registry key of the container image.
    # @return [String]
    attr_accessor :registry

    # **[Required]** The name of the container image.
    # @return [String]
    attr_accessor :image

    # **[Required]** The ID of the last container image scan result Id
    # @return [String]
    attr_accessor :last_container_scan_id

    # **[Required]** Date and time the scan was completed, as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339)
    # @return [DateTime]
    attr_accessor :time_scan_completed

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'container_scan_target_id': :'containerScanTargetId',
        'repository': :'repository',
        'registry': :'registry',
        'image': :'image',
        'last_container_scan_id': :'lastContainerScanId',
        'time_scan_completed': :'timeScanCompleted'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'container_scan_target_id': :'String',
        'repository': :'String',
        'registry': :'String',
        'image': :'String',
        'last_container_scan_id': :'String',
        'time_scan_completed': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :container_scan_target_id The value to assign to the {#container_scan_target_id} property
    # @option attributes [String] :repository The value to assign to the {#repository} property
    # @option attributes [String] :registry The value to assign to the {#registry} property
    # @option attributes [String] :image The value to assign to the {#image} property
    # @option attributes [String] :last_container_scan_id The value to assign to the {#last_container_scan_id} property
    # @option attributes [DateTime] :time_scan_completed The value to assign to the {#time_scan_completed} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.container_scan_target_id = attributes[:'containerScanTargetId'] if attributes[:'containerScanTargetId']

      raise 'You cannot provide both :containerScanTargetId and :container_scan_target_id' if attributes.key?(:'containerScanTargetId') && attributes.key?(:'container_scan_target_id')

      self.container_scan_target_id = attributes[:'container_scan_target_id'] if attributes[:'container_scan_target_id']

      self.repository = attributes[:'repository'] if attributes[:'repository']

      self.registry = attributes[:'registry'] if attributes[:'registry']

      self.image = attributes[:'image'] if attributes[:'image']

      self.last_container_scan_id = attributes[:'lastContainerScanId'] if attributes[:'lastContainerScanId']

      raise 'You cannot provide both :lastContainerScanId and :last_container_scan_id' if attributes.key?(:'lastContainerScanId') && attributes.key?(:'last_container_scan_id')

      self.last_container_scan_id = attributes[:'last_container_scan_id'] if attributes[:'last_container_scan_id']

      self.time_scan_completed = attributes[:'timeScanCompleted'] if attributes[:'timeScanCompleted']

      raise 'You cannot provide both :timeScanCompleted and :time_scan_completed' if attributes.key?(:'timeScanCompleted') && attributes.key?(:'time_scan_completed')

      self.time_scan_completed = attributes[:'time_scan_completed'] if attributes[:'time_scan_completed']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        container_scan_target_id == other.container_scan_target_id &&
        repository == other.repository &&
        registry == other.registry &&
        image == other.image &&
        last_container_scan_id == other.last_container_scan_id &&
        time_scan_completed == other.time_scan_completed
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [container_scan_target_id, repository, registry, image, last_container_scan_id, time_scan_completed].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
